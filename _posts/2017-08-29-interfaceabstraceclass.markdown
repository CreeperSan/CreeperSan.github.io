---
layout:     post
title:      "Java中抽象类和接口的区别以及各自的使用场景"
date:       2017-08-29 23:22:00
author:     "CreeperSan"
header-img: "img/post/170507about/header.jpg"
tags:
    - JAVA
    - 抽象类
    - 接口
---

#### 1. 相同点
+ 两者都是抽象类，都不允许拥有对象的实例
+ 接口的实现类以及抽象类的子类都必须要实现已经实现的抽象方法。

#### 2. 不同点
+ 接口的实现需要使用implements 关键字，而抽象类则是需要继承，使用extends关键字
+ 一个类可以实现多个接口，但是只能继承自一个抽象类
+ 接口强调特定功能的实现，而抽象类强调的是子类与抽象父类之间的所属关系。
+ 尽管接口实现类以及抽象类的子类都需要实现其中的抽象方法，但是他们的实现形式有所不同，抽象类中的方法都是抽象方法，而且都只有声明，没有方法体。但是抽象类的子类却可以选择性的实现其中的方法。但是这也是有限制的，假如抽象类的子类他没有是选全部的抽象方法的话，那么他也只能被声明为抽象类，也就意味着抽象类的子类也不能有实例。而且抽象子类对于其父类的非抽象方法可以重写，也可以直接继承，也可以重新将其声明为抽象方法，让继承自他的子类来实现。
+ 抽象类是类和接口的中介
+ 接口是完全抽象的，只能声明public的抽象方法和常量，而且不能定义方法体，也不能声明实例变量。而抽象类则可以声明抽象方法，并且可以定义缺省的方法体，供子类继承或者重写，同时他也可以定义自己的实例化变量，以供子类继承和使用。

#### 3. interface的应用场合
+ 类和类之间需要特定的接口进行协调对接，但是却不在乎这个协调对接的过程是怎么实现的。
+ 接口也可以作为一种标记的功能而存在，也就是说可以是一个什么方法都没有空接口，参考序列化(Serializable)这个接口，他源码是没有内容的，只是为了标记implement这个接口的对象可以被序列化。
+ 需要将一组类视为单一的类，而调用者只通过接口和这组类发生联系
+ 需要实现特定的多项功能，而这些功能之间可能完全没有任何联系。

#### 4. abstart class的应用场合
总的来说，在既需要统一的接口，又需要实例变量或缺省方法的情况下，就可以使用它，最常见的有：
+ 定义了一组接口，但又不想强迫每个实现类都必须实现所有的接口。又可以用抽象类定义一组方法体，甚至可以是空方法体，然后由子类选择自己所感兴趣的方法来覆盖。
+ 再某些场合下，只靠纯粹的接口不能满足类与类之间的协调，还必须用到类种表示状态的变量来区别不同的关系。抽象类就可以很好的实现这一点。
+ 规范了一组相互协调的方法，其中一些方法是共同的，可以共享的，无需子类分别实现，而另一个方法却需要各个子类根据自己的特点状态来实现特定的功能。

---
#### 参考链接
+ [Rysinal - 抽象类和接口的区别以及使用场景（记）](http://blog.csdn.net/lamyuqingcsdn/article/details/50501871#3-interface的应用场合)